pragma solidity ^0.5.0;

interface PoutineToken {
    function decimals() external view returns (uint8);
    function balanceOf(address _address) external view returns (uint256);
    function transfer(address _to, uint256 _value) external returns (bool success);
}

contract TokenSale {
    address payable owner;
    uint256 public price;
    PoutineToken public PoutineTokenContract;
    uint256 public tokensSold;

    event Sold(address buyer, uint256 amount);

    constructor(uint256 _price, address _addressContract) public {
        owner = msg.sender;
        price = _price;
        PoutineTokenContract = PoutineToken(_addressContract);
    }

    function buy(uint256 _numTokens) public payable {
        uint256 totalPrice = _numTokens * price;
        require(msg.value == totalPrice, "Insufficient payment");

        uint256 scaledAmount = _numTokens * (10**uint256(PoutineTokenContract.decimals()));
        require(PoutineTokenContract.balanceOf(address(this)) >= scaledAmount, "Insufficient tokens available");

        tokensSold += _numTokens;
        require(PoutineTokenContract.transfer(msg.sender, scaledAmount), "Token transfer failed");

        emit Sold(msg.sender, _numTokens);
    }

    function endSale() public {
        require(msg.sender == owner, "Only the owner can end the sale");
        require(PoutineTokenContract.transfer(owner, PoutineTokenContract.balanceOf(address(this))), "Token transfer failed");
        owner.transfer(address(this).balance);
    }
}
